apply plugin: 'com.android.application'

//def my_boost_dir = local_props("boost.dir")
//def my_boost_dir_libs = my_boost_dir + "/libs"
//def my_boost_dir_inc  = my_boost_dir + "/include"
def my_abi_filters = local_props("ABI_FILTERS")

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    ndkVersion "21.0.6113669"
    defaultConfig {
        applicationId "org.rephial.xyangband"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 90
        versionName "1.33.4"
        externalNativeBuild {
            cmake {
                // flags for the c++ compiler eg "-std=c++14 -frtti -fexceptions"
                // If you set cppFlags to "-std=c++14", you may need to build your boost libraries
                // with the same flags, depending on your compiler defaults.
                // cppFlags "-std=c++14"

                // this causes libc++_shared.so to get packaged into .apk
                //arguments '-DANDROID_STL=c++_shared'

                // This is used in CMakeLists.txt so our native code can find/use (prebuilt) boost
                //arguments '-DMY_BOOST_LIBS_DIR=' + my_boost_dir_libs
                // Only this one for tome 2.4.0
                //arguments '-DMY_BOOST_INC_DIR='  + my_boost_dir_inc
            }
        }
    }
    buildTypes {
        debug {
            ndk {
                abiFilters = []
                abiFilters.addAll(my_abi_filters.split(';').collect{it as String})
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk { debugSymbolLevel 'FULL' }
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
}

//------------------------------------------------------------
def local_props(key) { // reads ~ value from local.properties file
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}
