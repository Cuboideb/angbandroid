$#include "angband.h"

typedef char* cptr;
typedef int errr;


/***** Constants *****/

#define TERM_DARK                0  /* 'd' */   /* 0,0,0 */
#define TERM_WHITE               1  /* 'w' */   /* 4,4,4 */
#define TERM_SLATE               2  /* 's' */   /* 2,2,2 */
#define TERM_ORANGE              3  /* 'o' */   /* 4,2,0 */
#define TERM_RED                 4  /* 'r' */   /* 3,0,0 */
#define TERM_GREEN               5  /* 'g' */   /* 0,2,1 */
#define TERM_BLUE                6  /* 'b' */   /* 0,0,4 */
#define TERM_UMBER               7  /* 'u' */   /* 2,1,0 */
#define TERM_L_DARK              8  /* 'D' */   /* 1,1,1 */
#define TERM_L_WHITE             9  /* 'W' */   /* 3,3,3 */
#define TERM_VIOLET             10  /* 'v' */   /* 4,0,4 */
#define TERM_YELLOW             11  /* 'y' */   /* 4,4,0 */
#define TERM_L_RED              12  /* 'R' */   /* 4,0,0 */
#define TERM_L_GREEN            13  /* 'G' */   /* 0,4,0 */
#define TERM_L_BLUE             14  /* 'B' */   /* 0,4,4 */
#define TERM_L_UMBER            15  /* 'U' */   /* 3,2,1 */



/*
 * Mega-Hack -- some primitive sound support (see "main-win.c")
 *
 * Some "sound" constants for "Term_xtra(TERM_XTRA_SOUND, val)"
 */
#define SOUND_NONE		 0
#define SOUND_HIT        1
#define SOUND_MISS       2
#define SOUND_FLEE       3
#define SOUND_DROP       4
#define SOUND_KILL       5
#define SOUND_LEVEL      6
#define SOUND_DEATH      7
#define SOUND_STUDY      8
#define SOUND_TELEPORT   9
#define SOUND_SHOOT     10
#define SOUND_QUAFF     11
#define SOUND_ZAP       12
#define SOUND_WALK      13
#define SOUND_TPOTHER   14
#define SOUND_HITWALL   15
#define SOUND_EAT       16
#define SOUND_STORE1    17
#define SOUND_STORE2    18
#define SOUND_STORE3    19
#define SOUND_STORE4    20
#define SOUND_DIG       21
#define SOUND_OPENDOOR  22
#define SOUND_SHUTDOOR  23
#define SOUND_TPLEVEL   24
#define SOUND_SCROLL	25
#define SOUND_BUY	    26
#define SOUND_SELL	    27
#define SOUND_WARN	    28
#define SOUND_ROCKET    29		/* Somebody's shooting rockets */
#define SOUND_N_KILL    30		/* The player kills a non-living/undead monster */
#define SOUND_U_KILL    31		/* The player kills a unique */
#define SOUND_QUEST     32		/* The player has just completed a quest */
#define SOUND_HEAL      33		/* The player was healed a little bit */
#define SOUND_X_HEAL    34		/* The player was healed full health */
#define SOUND_BITE      35		/* A monster bites you */
#define SOUND_CLAW      36		/* A monster claws you */
#define SOUND_M_SPELL   37		/* A monster casts a miscellaneous spell */
#define SOUND_SUMMON    38		/* A monster casts a summoning spell */
#define SOUND_BREATH    39		/* A monster breathes */
#define SOUND_BALL      40		/* A monster casts a ball / bolt spell */
#define SOUND_M_HEAL    41		/* A monster heals itself somehow */
#define SOUND_ATK_SPELL 42		/* A monster casts a misc. offensive spell */
#define SOUND_EVIL      43		/* Something nasty has just happened! */
#define SOUND_TOUCH     44		/* A monster touches you */
#define SOUND_STING     45		/* A monster stings you */
#define SOUND_CRUSH     46		/* A monster crushes / envelopes you */
#define SOUND_SLIME     47		/* A monster drools/spits/etc on you */
#define SOUND_WAIL      48		/* A monster wails */
#define SOUND_WINNER    49		/* Just won the game! */
#define SOUND_FIRE      50		/* An item was burned */
#define SOUND_ACID      51		/* An item was destroyed by acid */
#define SOUND_ELEC      52		/* An item was destroyed by electricity */
#define SOUND_COLD      53		/* An item was shattered */
#define SOUND_ILLEGAL   54		/* Illegal command attempted */
#define SOUND_FAIL      55		/* Fail to get a spell off / activate an item */
#define SOUND_WAKEUP    56		/* A monster wakes up */
#define SOUND_INVULN    57		/* Invulnerability! */
#define SOUND_FALL      58		/* Falling through a trapdoor... */
#define SOUND_PAIN      59		/* A monster is in pain! */
#define SOUND_DESTITEM  60		/* An item was destroyed by misc. means */
#define SOUND_MOAN      61		/* A monster makes a moan/beg/insult attack */
#define SOUND_SHOW      62		/* A monster makes a "show" attack */
#define SOUND_UNUSED    63		/* (no sound for gaze attacks) */
#define SOUND_EXPLODE   64		/* Something (or somebody) explodes */

/*
 * Mega-Hack -- maximum known sounds
 */
#define SOUND_MAX 65


/*
 * Bit flags for the "p_ptr->update" variable
 */
#define PU_BONUS        0x00000001L     /* Calculate bonuses */
#define PU_TORCH        0x00000002L     /* Calculate torch radius */
/* xxx (many) */
#define PU_HP           0x00000010L     /* Calculate chp and mhp */
#define PU_MANA         0x00000020L     /* Calculate csp and msp */
#define PU_SPELLS       0x00000040L     /* Calculate spells */
/* xxx (many) */
/* xxx (many) */
/* xxx (many) */
#define PU_VIEW         0x00100000L     /* Update view */
#define PU_MON_LITE		0x00200000L		/* Monster illumination */
/* xxx */
#define PU_MONSTERS     0x01000000L     /* Update monsters */
#define PU_DISTANCE     0x02000000L     /* Update distances */
/* xxx */
#define PU_FLOW         0x10000000L     /* Update flow */
/* xxx (many) */


/*
 * Bit flags for the "p_ptr->redraw" variable
 */
#define PR_MISC         0x00000001L     /* Display Race/Class */
#define PR_TITLE        0x00000002L     /* Display Title */
#define PR_LEV          0x00000004L     /* Display Level */
#define PR_EXP          0x00000008L     /* Display Experience */
#define PR_STATS        0x00000010L     /* Display Stats */
#define PR_ARMOR        0x00000020L     /* Display Armor */
#define PR_HP           0x00000040L     /* Display Hitpoints */
#define PR_MANA         0x00000080L     /* Display Mana */
#define PR_GOLD         0x00000100L     /* Display Gold */
#define PR_DEPTH        0x00000200L     /* Display Depth */
#define PR_EQUIPPY      0x00000400L     /* Display equippy chars */
#define PR_HEALTH       0x00000800L     /* Display Health Bar */
#define PR_CUT          0x00001000L     /* Display Extra (Cut) */
#define PR_STUN         0x00002000L     /* Display Extra (Stun) */
#define PR_HUNGER       0x00004000L     /* Display Extra (Hunger) */
#define PR_STATUS       0x00008000L     /* Display Status Bar */
#define PR_BLIND        0x00010000L     /* Display Extra (Blind) */
#define PR_CONFUSED     0x00020000L     /* Display Extra (Confused) */
#define PR_AFRAID       0x00040000L     /* Display Extra (Afraid) */
#define PR_POISONED     0x00080000L     /* Display Extra (Poisoned) */
#define PR_STATE        0x00100000L     /* Display Extra (State) */
#define PR_SPEED        0x00200000L     /* Display Extra (Speed) */
#define PR_STUDY        0x00400000L     /* Display Extra (Study) */
/* xxx */
#define PR_EXTRA        0x01000000L     /* Display Extra Info */
#define PR_BASIC        0x02000000L     /* Display Basic Info */
#define PR_MAP          0x04000000L     /* Display Map */
#define PR_WIPE         0x08000000L     /* Hack -- Total Redraw */
/* xxx */
/* xxx */
/* xxx */
/* xxx */

/*
 * Bit flags for the "p_ptr->window" variable (etc)
 */
#define PW_INVEN            0x00000001L /* Display inven/equip */
#define PW_EQUIP            0x00000002L /* Display equip/inven */
#define PW_SPELL            0x00000004L /* Display spell list */
#define PW_PLAYER           0x00000008L /* Display character */
#define PW_SCRIPT_VARS      0x00000010L /* Display script messages */
#define PW_SCRIPT_SOURCE    0x00000020L /* Display script messages */
#define PW_MESSAGE          0x00000040L /* Display messages */
#define PW_OVERHEAD         0x00000080L /* Display overhead view */
#define PW_MONSTER          0x00000100L /* Display monster recall */
#define PW_OBJECT           0x00000200L /* Display object recall */
#define PW_DUNGEON          0x00000400L /* Display dungeon view */
#define PW_SNAPSHOT         0x00000800L /* Display snap-shot */
#define PW_VISIBLE          0x00001000L /* Display monster visible list */
#define PW_BORG_1           0x00002000L /* Display borg messages */
#define PW_BORG_2           0x00004000L /* Display borg status */


/***** Types *****/



/***** Variables *****/



/***** Functions *****/

extern void update_stuff(void);
extern void redraw_stuff(void);
extern void window_stuff(void);
extern void handle_stuff(void);

extern void message_flush(void);
extern void msgf(cptr fmt);
extern bool get_check(cptr prompt);
extern void sound(int num);
