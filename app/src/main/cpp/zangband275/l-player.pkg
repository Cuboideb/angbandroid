$#include "angband.h"

typedef char* cptr;
typedef int errr;


/***** Constants *****/

/*
 * Player class constants (hard-coded by save-files, arrays, etc)
 */
#define CLASS_WARRIOR            0
#define CLASS_MAGE               1
#define CLASS_PRIEST             2
#define CLASS_ROGUE              3
#define CLASS_RANGER             4
#define CLASS_PALADIN            5
#define CLASS_WARRIOR_MAGE       6
#define CLASS_CHAOS_WARRIOR      7
#define CLASS_MONK               8
#define CLASS_MINDCRAFTER        9
#define CLASS_HIGH_MAGE         10

/*
 * Indexes of the various "stats" (hard-coded by savefiles, etc).
 */
#define A_STR	0
#define A_INT	1
#define A_WIS	2
#define A_DEX	3
#define A_CON	4
#define A_CHR	5

/*
 * Total number of stats.
 */
#define A_MAX	6

/*
 * Player sex constants (hard-coded by save-files, arrays, etc)
 */
#define SEX_FEMALE              0
#define SEX_MALE                1

/*
 * Player constants
 */
#define PY_MAX_EXP	99999999L	/* Maximum exp */
#define PY_MAX_GOLD	999999999L	/* Maximum gold */
#define PY_MAX_LEVEL	50		/* Maximum level */

/*
 * Player "food" crucial values
 */
#define PY_FOOD_MAX		15000	/* Food value (Bloated) */
#define PY_FOOD_FULL	10000	/* Food value (Normal) */
#define PY_FOOD_ALERT	2000	/* Food value (Hungry) */
#define PY_FOOD_WEAK	1000	/* Food value (Weak) */
#define PY_FOOD_FAINT	500		/* Food value (Fainting) */
#define PY_FOOD_STARVE	100		/* Food value (Starving) */


/***** Types *****/


struct player_data
{
	s16b age;	/* Characters age */
	s16b ht;	/* Height */
	s16b wt;	/* Weight */
	s16b sc;	/* Social Class */
	
	byte hitdie;	/* Hit dice (sides) */

	byte psex;	/* Sex index */
	byte prace;	/* Race index */
	byte pclass;	/* Class index */
};

struct player_realm
{
	u32b learned;
	u32b worked;
	u32b forgotten;

	byte realm;
};

struct player_spell
{
	player_realm r[2];
	byte order[PY_MAX_SPELLS];	/* Spell order */
};

struct player_timed
{
	s16b fast;	/* Timed -- Fast */
	s16b slow;	/* Timed -- Slow */
	s16b blind;	/* Timed -- Blindness */
	s16b paralyzed;	/* Timed -- Paralysis */
	s16b confused;	/* Timed -- Confusion */
	s16b afraid;	/* Timed -- Fear */
	s16b image;	/* Timed -- Hallucination */
	s16b poisoned;	/* Timed -- Poisoned */
	s16b cut;	/* Timed -- Cut */
	s16b stun;	/* Timed -- Stun */

	s16b protevil;	/* Timed -- Protection */
	s16b invuln;	/* Timed -- Invulnerable */
	s16b hero;	/* Timed -- Heroism */
	s16b shero;	/* Timed -- Super Heroism */
	s16b shield;	/* Timed -- Shield Spell */
	s16b blessed;	/* Timed -- Blessed */
	s16b invis;	/* Timed -- See Invisible */
	s16b infra;	/* Timed -- Infra Vision */

	s16b oppose_acid;	/* Timed -- oppose acid */
	s16b oppose_elec;	/* Timed -- oppose lightning */
	s16b oppose_fire;	/* Timed -- oppose heat */
	s16b oppose_cold;	/* Timed -- oppose cold */
	s16b oppose_pois;	/* Timed -- oppose poison */
	s16b esp;	/* Timed ESP */
	s16b wraith_form;	/* Timed wraithform */
	s16b resist_magic;	/* Timed Resist Magic (later) */
	
	s16b word_recall;	/* Word of recall counter */
};

struct player_state
{
	char died_from[80];	/* Cause of death */
	
	s16b resting;	/* Resting counter */
	s16b running;	/* Running counter */

	byte confusing;	/* Glowing hands */
	byte searching;	/* Currently searching */

	u16b total_winner;	/* Total winner */

	u16b panic_save;	/* Panic save */
	u16b noscore;	/* Cheating flags */

	bool is_dead;	/* Player is dead */
	bool wizard;	/* Player is in wizard mode */
	
	bool playing;	/* True if player is playing */
	bool leaving;	/* True if player is leaving */

	bool create_up_stair;	/* Create up stair on next level */
	bool create_down_stair;	/* Create down stair on next level */
	
	s16b energy_use;	/* Energy use this turn */
	
	bool cumber_armor;	/* Mana draining armor */
	bool cumber_glove;	/* Mana draining gloves */
	bool heavy_wield;	/* Heavy weapon */
	bool heavy_shoot;	/* Heavy shooter */
	bool icky_wield;	/* Icky weapon */
	bool detected;	/* Detected for traps? */
	
	bool skip_more;	/* Skip the --more-- prompt */
	bool mon_fight;	/* Monster fighting indicator */

	bool monk_armour_stat;	/* Status of monk armour */
	
	byte noise_level;	/* Amount of noise since last update */
	
	u16b store_top;		/* Top of store inventory list */
};

/* Skills */
#define MAX_SKILL	10

#define SKILL_DIS	0 /* Skill: Disarming */
#define SKILL_DEV	1 /* Skill: Magic Devices */
#define SKILL_SAV	2 /* Skill: Saving throw */
#define SKILL_STL	3 /* Skill: Stealth factor */
#define SKILL_SNS	4 /* Skill: Sensing ability */
#define SKILL_FOS	5 /* Skill: Searching frequency */
#define SKILL_THN	6 /* Skill: To hit (normal) */
#define SKILL_THB	7 /* Skill: To hit (shooting) */
#define SKILL_THT	8 /* Skill: To hit (throwing) */
#define SKILL_DIG	9 /* Skill: Digging */

struct player_stat
{
	s16b max;	/* Current "maximal" stat values */
	s16b cur;	/* Current "natural" stat values */

	s16b use;	/* Current modified stats */
	s16b top;	/* Maximal modified stats */

	s16b add;	/* Equipment stat bonuses */
	s16b ind;	/* Indexes into stat tables */
};

struct player_type
{
	s16b px;			/* Player location */
	s16b py;			/* Player location */
	
	player_data rp;	/* Role-play information */

	s16b depth;			/* Cur depth */
	s16b max_lev;		/* Max level */
	s16b lev;			/* Cur level */
	u16b exp_frac;		/* Cur exp frac (times 2^16) */

	s32b max_exp;		/* Max experience */
	s32b exp;			/* Cur experience */	
	
	s32b au;			/* Current Gold */

	s16b place_num;		/* Current place number in the wilderness */

	s32b wilderness_x;	/* Coordinates in the wilderness */
	s32b wilderness_y;

	s16b mhp;			/* Max hit pts */
	s16b chp;			/* Cur hit pts */
	u16b chp_frac;		/* Cur hit frac (times 2^16) */

	s16b msp;			/* Max mana pts */
	s16b csp;			/* Cur mana pts */
	u16b csp_frac;		/* Cur mana frac (times 2^16) */
	
	player_spell spell;	/* Spell information */
	
	u32b muta1;			/* Mutations */
	u32b muta2;			/* Mutations */
	u32b muta3;			/* Mutations */

	s16b virtues[MAX_PLAYER_VIRTUES];
	s16b vir_types[MAX_PLAYER_VIRTUES];
	
	s16b chaos_patron;	/* Players Chaos Patron */

	s16b energy;		/* Current energy */
	s16b food;			/* Current nutrition */


	s16b player_hp[PY_MAX_LEVEL];	/* HP Array */

	u16b expfact;		/* Experience factor
						 * Note: was byte, causing overflow for Amberite
						 * characters (such as Amberite Paladins)
						 */
	player_timed tim;	/* Timed effects */
	
	player_state state;	/* Internal state of the player */
	
	s16b skills[MAX_SKILL];	/* Player skills */
	
	player_stat stat[A_MAX];	/* The player's stats */

	int sp_bonus;           /* Bonus MP */

	/*** Temporary fields ***/

	s32b align;			/* Good/evil/neutral */
	
	s16b total_weight;	/* Total weight being carried */

	s16b target_set;		/* Target flag */
	s16b target_who;		/* Target identity */
	s16b target_row;		/* Target location */
	s16b target_col;		/* Target location */

	s16b health_who;		/* Health bar trackee */

	s16b monster_race_idx;	/* Monster race trackee */
	u16b max_seen_r_idx;	/* Most powerful monster visible */
	s16b object_kind_idx;	/* Object kind trackee */

	s16b new_spells;		/* Number of spells available */

	s16b cur_lite;		/* Radius of lite (if any) */

	u32b notice;		/* Special Updates (bit flags) */
	u32b update;		/* Pending Updates (bit flags) */
	u32b redraw;		/* Normal Redraws (bit flags) */
	u32b window;		/* Window Redraws (bit flags) */
	
	/*
	 * Flags on equipment items and the racial/class
	 * effects logical-ored together.
	 */
	u32b flags[4];


	/*** Extracted fields ***/
	s16b dis_to_h;		/* Known bonus to hit */
	s16b dis_to_d;		/* Known bonus to dam */
	s16b dis_to_a;		/* Known bonus to ac */

	s16b dis_ac;		/* Known base ac */

	s16b to_h;			/* Bonus to hit */
	s16b to_d;			/* Bonus to dam */
	s16b to_a;			/* Bonus to ac */

	s16b ac;			/* Base ac */

	s16b see_infra;		/* Infravision range */

	u32b noise;			/* Derived from stealth */

	s16b num_blow;		/* Number of blows */
	s16b num_fire;		/* Number of shots */

	byte ammo_mult;		/* Ammo multiplier */
	byte ammo_tval;		/* Ammo variety */
	byte bow_energy;	/* shooter speed */

	s16b pspeed;		/* Current speed */

	/*** Pet commands ***/

	s16b pet_follow_distance;	/* Length of the imaginary "leash" for pets */
	byte pet_open_doors;		/* flag - allow pets to open doors */
	byte pet_pickup_items;		/* flag - allow pets to pickup items */
	
	/* Options */
	bool options[OPT_PLAYER];
	bool birth[OPT_BIRTH];
};


/***** Variables *****/

extern player_type *p_ptr @ player;

/* Hack - options */
extern bool ironman_nightmare;
extern bool disturb_minor;

extern const byte adj_str_wgt[40];

/***** Functions *****/

extern bool inc_blind(int v);
extern bool clear_blind(void);
extern bool inc_confused(int v);
extern bool clear_confused(void);
extern bool inc_poisoned(int v);
extern bool clear_poisoned(void);
extern bool inc_afraid(int v);
extern bool clear_afraid(void);
extern bool inc_paralyzed(int v);
extern bool clear_paralyzed(void);
extern bool inc_image(int v);
extern bool clear_image(void);
extern bool inc_fast(int v);
extern bool clear_fast(void);
extern bool inc_slow(int v);
extern bool clear_slow(void);
extern bool inc_shield(int v);
extern bool inc_blessed(int v);
extern bool inc_hero(int v);
extern bool inc_shero(int v);
extern bool inc_protevil(int v);
extern bool inc_wraith_form(int v);
extern bool inc_tim_esp(int v);
extern bool clear_tim_esp(void);
extern bool inc_invuln(int v);
extern bool inc_tim_invis(int v);
extern bool inc_tim_infra(int v);
extern bool inc_oppose_acid(int v);
extern bool inc_oppose_elec(int v);
extern bool inc_oppose_fire(int v);
extern bool inc_oppose_cold(int v);
extern bool inc_oppose_pois(int v);
extern byte res_acid_lvl(void);
extern byte res_elec_lvl(void);
extern byte res_fire_lvl(void);
extern byte res_cold_lvl(void);
extern byte res_pois_lvl(void);
extern bool inc_stun(int v);
extern bool clear_stun(void);
extern bool inc_cut(int v);
extern bool clear_cut(void);
extern bool set_food(int v);
extern void gain_exp(s32b amount);
extern void lose_exp(s32b amount);
extern bool hp_player(int num);
extern bool do_dec_stat(int stat);
extern bool do_res_stat(int stat);
extern bool do_inc_stat(int stat);
extern void take_hit(int dam, cptr kb_str);
extern bool inc_stat(int stat);
extern bool dec_stat(int stat, int amount, int permanent);
extern bool res_stat(int stat);
extern bool lose_all_info(void);
extern bool restore_level(void);
extern bool player_res(u32b flag);
extern void have_nightmare(void);
extern void disturb(bool stop_search);
extern void move_dun_level(int direction);
extern int count_mutations(void);
extern bool gain_mutation(int choose_mut);
extern bool lose_mutation(int choose_mut);
